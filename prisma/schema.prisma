
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?
  username         String    @unique
  name             String?
  role             String    @default("user")
  isVerified       Boolean   @default(false)
  verificationToken String?
  otp              String?
  otpExpiry        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  appointments     Appointment[] @relation("UserAppointments")
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  payments         Payment[]
  healthMetrics    HealthMetric[]
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  groupDiscussions GroupDiscussion[]
  electronicHealthRecords ElectronicHealthRecord[] @relation("UserRecords")
  doctorRecords    ElectronicHealthRecord[] @relation("DoctorRecords")
}

model Appointment {
  id               Int       @id @default(autoincrement())
  userId           Int
  doctorId         Int
  appointmentDate  DateTime
  status           String    @default("scheduled")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation("UserAppointments", fields: [userId], references: [id])
  doctor           User      @relation("DoctorAppointments", fields: [doctorId], references: [id])
  payments         Payment[]
}

model Payment {
  id               Int       @id @default(autoincrement())
  amount           Float
  paymentStatus    String
  paymentDate      DateTime  @default(now())
  userId           Int
  appointmentId    Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  appointment      Appointment @relation(fields: [appointmentId], references: [id])
}

model HealthMetric {
  id               Int       @id @default(autoincrement())
  userId           Int
  metricType       String
  value            Float
  goal             Float?
  milestoneAchieved Boolean  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}

model Message {
  id               Int       @id @default(autoincrement())
  senderId         Int
  receiverId       Int
  content          String
  isEncrypted      Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  sender           User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver         User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model GroupDiscussion {
  id               Int       @id @default(autoincrement())
  userId           Int
  topic            String
  content          String
  isEncrypted      Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}

model ElectronicHealthRecord {
  id               Int       @id @default(autoincrement())
  userId           Int
  doctorId         Int
  recordData       Json
  updatedAt        DateTime  @updatedAt
  createdAt        DateTime  @default(now())

  user             User      @relation("UserRecords", fields: [userId], references: [id])
  doctor           User      @relation("DoctorRecords", fields: [doctorId], references: [id])
}